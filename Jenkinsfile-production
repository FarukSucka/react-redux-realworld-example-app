node (label: 'master'){
    def app
    env.TOKEN = "faruk-slack"
    env.SLACK_TEAM_DOMAIN = "mopdevs" 
    env.SLACK_CHANNEL = "taskbuilds"
    env.MSG_PREFIX = "*${env.JOB_NAME}-${env.BUILD_NUMBER}*"
    env.CONSOLEURL = "`${env.BUILD_URL}console`"

    stage ('Properties') {
        properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '2', numToKeepStr: '10')), disableConcurrentBuilds()])    
        }

    stage('Clone repository') {
        checkout scm
    }

    stage('Get artifact') {
    try {
        retry(2) {
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'faruk-aws', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                sh "aws s3 get-object --bucket text-content --key dist.tar.gz s3://faruk-artifacts/dist.tar.gz"
                sh "tar -zxvf dist.tar.gz"
            }
        slackSend message: "${MSG_PREFIX} - Uploaded artifact to S3",
            color: "good",
            channel: "${SLACK_CHANNEL}",
            teamDomain: "${env.SLACK_TEAM_DOMAIN}",
            tokenCredentialId: "${env.TOKEN}"
        }
        catch (e) {
        slackSend message: "${MSG_PREFIX} - Build failed during `Deploy` stage",
            color: "danger",
            channel: "${SLACK_CHANNEL}",
            teamDomain: "${env.SLACK_TEAM_DOMAIN}",
            tokenCredentialId: "${env.TOKEN}"
        throw(e)
            }
        }
    } 

    stage('Deploy') {
        try {
            retry(2) {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'faruk-aws', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh "aws s3 sync --acl public-read --sse --delete dist/production s3://faruk-production.faruksuljic.com"
                    }
            slackSend message: "${MSG_PREFIX} - Deployed to S3",
                color: "good",
                channel: "${SLACK_CHANNEL}",
                teamDomain: "${env.SLACK_TEAM_DOMAIN}",
                tokenCredentialId: "${env.TOKEN}"
            }
        } catch (e) {
            slackSend message: "${MSG_PREFIX} - Build failed during `Deploy` stage",
                color: "danger",
                channel: "${SLACK_CHANNEL}",
                teamDomain: "${env.SLACK_TEAM_DOMAIN}",
                tokenCredentialId: "${env.TOKEN}"
            throw(e)
        }
    }
    stage('Invalidation') {
        try {
            retry(2) {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'faruk-aws', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh "aws cloudfront create-invalidation --distribution-id E2LJPBT1VGHVG5 --paths '/*'"
                    }
            slackSend message: "${MSG_PREFIX} - CloudFront Invalidated",
                color: "good",
                channel: "${SLACK_CHANNEL}",
                teamDomain: "${env.SLACK_TEAM_DOMAIN}",
                tokenCredentialId: "${env.TOKEN}"
            }
        } catch (e) {
            slackSend message: "${MSG_PREFIX} - Failed at invalidation@CF",
                color: "danger",
                channel: "${SLACK_CHANNEL}",
                teamDomain: "${env.SLACK_TEAM_DOMAIN}",
                tokenCredentialId: "${env.TOKEN}"
            throw(e)
        }
    }
    stage ('Cleanup'){
        cleanWs cleanWhenFailure: false
    }
}
